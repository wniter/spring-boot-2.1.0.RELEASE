执行顺序输出为：
=========InScanAutoConfigurationBean============
=========annoorder.AnnoAutoConfiguration2 Constructor============
=========annoorder.AutoConfigurationAnnoBean2============
=========annoorder.AutoConfigurationAnnoBean22============
=========annoorder.ZAnnoAutoConfiguration Constructor============
=========annoorder.AnnoAutoConfiguration1 Constructor============
=========annoorder.AutoConfigurationAnnoBean1============
=========annoorder.ZAutoConfigurationAnnoBean============
=========annoorder.ZAutoConfigurationAnnoBean2============
=========annoorder.AnnoAutoConfiguration3 Constructor============
=========annoorder.AutoConfigurationAnnoBean33============
=========annoorder.AutoConfigurationAnnoBean3============
=========annoorder.AutoConfigurationAnnoBean11============

因为ZAnnoAutoConfiguration优先级最高,AnnoAutoConfiguration1优先级最低，AnnoAutoConfiguration3优先级次低，
而AnnoAutoConfiguration2是@AutoConfigureBefore(ZAnnoAutoConfiguration.class)，且ZAnnoAutoConfiguration创建bean时要依赖于优先级最低的AnnoAutoConfiguration1里面的bean
因此AnnoAutoConfiguration1要优先于AnnoAutoConfiguration3加载创建
因此自动配置类加载构造的顺序为：AnnoAutoConfiguration2->ZAnnoAutoConfiguration->AnnoAutoConfiguration1->AnnoAutoConfiguration3
结论：显然自动配置类的加载顺序除了受@AutoConfigureOrder影响外，还受里面bean方法上的@DependsOn注解的影响

一般情况下，哪个配置类先加载就先创建该配置类中的bean。因此首先创建AutoConfigurationAnnoBean2；
但是由于zAutoConfigurationAnnoBean @DependsOn("autoConfigurationAnnoBean1")，
所以必须先创建AutoConfigurationAnnoBean1和AutoConfigurationAnnoBean22，然后才创建ZAutoConfigurationAnnoBean，
因此顺序为：
AutoConfigurationAnnoBean2->AutoConfigurationAnnoBean22->AutoConfigurationAnnoBean1->ZAutoConfigurationAnnoBean
之后自动配置类的其他bean还是按照自动配置类的加载顺序来创建，最明显的是AutoConfigurationAnnoBean33和AutoConfigurationAnnoBean3都优先于AutoConfigurationAnnoBean11创建
因为AnnoAutoConfiguration1的优先级最低，虽然加载创建是先于AnnoAutoConfiguration3，但这并不意味着AnnoAutoConfiguration1里面的所有bean创建都优先于AnnoAutoConfiguration3
里面的bean创建，仅仅对AnnoAutoConfiguration1中被依赖的bean有效，其他bean的创建还是后于AnnoAutoConfiguration3的创建的
因此最终顺序为：
AutoConfigurationAnnoBean2->AutoConfigurationAnnoBean22->AutoConfigurationAnnoBean1->ZAutoConfigurationAnnoBean
->ZAutoConfigurationAnnoBean2->AutoConfigurationAnnoBean33->AutoConfigurationAnnoBean3->AutoConfigurationAnnoBean11

结论：
0，自动配置类的排序：先自然排序，然后@AutoConfigureOrder排序，最后@AutoConfigureBefore和@AutoConfigureAfter
1，同一个自动配置类里面的bean按照文本上下关系从上往下创建，跟bean name的自然排序无关；
2，正常情况下，不同自动配置类按照自动配置类之间的优先级加载创建，里面的bean也是逐个创建；
3，若高优先级自动配置类A里面的一个beanA依赖于低优先级自动配置类C里面的一个beanC,
   此时还有一个优先级居于自动配置类A和自动配置类C之间的自动配置类B，此时仅仅会先创建beanC
   ,再创建beanA,仅此而已，然后继续创建自动配置类A的其他bean,接着创建自动配置类B的bean，
   最后再创建自动配置类C除beanC之外的其他bean，虽然自动配置类C先于自动配置类B先加载创建，
   但谁叫自动配置类C的优先级低于自动配置类B呢
4，InScanAutoConfiguration这个配置类因为跟MainApplication在同一个package下，所以能够被spring扫描到，因此加载创建是先于spring.factories的自动配置类
